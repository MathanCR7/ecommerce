import asyncHandler from "../middleware/asyncHandler.js";
import PosOrder from "../models/PosOrder.js";
import Item from "../models/Item.js"; // Assuming Item model for stock updates (optional)

// @desc    Create new POS order
// @route   POST /api/admin/pos/orders
// @access  Private/Admin
const createPosOrder = asyncHandler(async (req, res) => {
  const {
    customer, // customer ID if registered, else null
    customerName, // walk-in name or registered user's name
    customerPhone,
    branch,
    orderType,
    items: orderItems, // [{ itemId, quantity, priceAtPurchase (frontend can send this), name, imagePath }]
    subTotal,
    productDiscount,
    extraDiscount,
    taxRate,
    taxAmount,
    deliveryCharge,
    totalAmount,
    paymentMethod,
    notes,
  } = req.body;

  if (!orderItems || orderItems.length === 0) {
    res.status(400);
    throw new Error("No order items");
  }

  // Validate items and prepare them for the order schema
  const populatedOrderItems = await Promise.all(
    orderItems.map(async (itemOrder) => {
      const dbItem = await Item.findById(itemOrder.itemId);
      if (!dbItem) {
        throw new Error(`Item with ID ${itemOrder.itemId} not found.`);
      }
      return {
        item: itemOrder.itemId,
        name: dbItem.name, // Use DB name for consistency
        quantity: itemOrder.quantity,
        priceAtPurchase: itemOrder.priceAtPurchase, // Price at the time of sale
        imagePath: dbItem.imagePath, // Use DB imagePath
      };
    })
  );

  const posOrder = new PosOrder({
    // orderNumber will be auto-generated by pre-save hook
    customer: customer || null,
    customerName,
    customerPhone,
    branch,
    orderType,
    items: populatedOrderItems,
    subTotal,
    productDiscount,
    extraDiscount,
    taxRate,
    taxAmount,
    deliveryCharge,
    totalAmount,
    paymentMethod,
    status: "Completed", // Default or based on payment
    notes,
    createdBy: req.admin._id, // Assuming req.admin is populated by auth middleware
  });

  const createdOrder = await posOrder.save();

  // Optional: Decrement stock levels here
  // for (const item of createdOrder.items) {
  //   await Item.findByIdAndUpdate(item.item, { $inc: { stock: -item.quantity } });
  // }

  res.status(201).json(createdOrder);
});

// @desc    Get all POS orders (for admin listing)
// @route   GET /api/admin/pos/orders
// @access  Private/Admin
const getPosOrders = asyncHandler(async (req, res) => {
  // Add pagination, filtering, sorting as needed
  const orders = await PosOrder.find({})
    .populate("customer", "name email") // Populate customer if ID exists
    .populate("createdBy", "username")
    .sort({ createdAt: -1 });
  res.json(orders);
});

// @desc    Get POS order by ID
// @route   GET /api/admin/pos/orders/:id
// @access  Private/Admin
const getPosOrderById = asyncHandler(async (req, res) => {
  const order = await PosOrder.findById(req.params.id)
    .populate("customer", "name email")
    .populate("createdBy", "username")
    .populate("items.item", "name"); // Populate item details within the items array

  if (order) {
    res.json(order);
  } else {
    res.status(404);
    throw new Error("Order not found");
  }
});

export { createPosOrder, getPosOrders, getPosOrderById };
